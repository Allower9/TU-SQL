name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Проверка кода
        uses: actions/checkout@v4

      - name: Установка Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Установка зависимостей
        run: npm install

      - name: Сборка проекта
        run: npm run build

      - name: Настройка Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Вход в Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Сборка и отправка образа Frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/frontend-tu:${{ github.ref_name }}
            ${{ secrets.DOCKER_USERNAME }}/frontend-tu:latest

      - name: Сборка и отправка образа Nginx
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./nginx/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/nginx-tu:latest

  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Определение окружения
        id: set_env
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "ENV=prod" >> $GITHUB_OUTPUT
            echo "SERVER_IP=${{ secrets.PROD_SERVER_IP }}" >> $GITHUB_OUTPUT
          else
            echo "ENV=dev" >> $GITHUB_OUTPUT
            echo "SERVER_IP=${{ secrets.DEV_SERVER_IP }}" >> $GITHUB_OUTPUT
          fi

      - name: Настройка SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}

      - name: Проверка соединения с сервером
        run: |
          ssh -o StrictHostKeyChecking=no user1@${{ steps.set_env.outputs.SERVER_IP }} "
            echo 'Соединение с сервером успешно'
            uname -a
          "

      - name: Подготовка Docker окружения
        timeout-minutes: 5
        run: |
          ssh -o StrictHostKeyChecking=no user1@${{ steps.set_env.outputs.SERVER_IP }} "
            sudo docker system prune -a -f || true
            sudo docker system df
            df -h
          "

      - name: Получение образа Frontend (с повтором)
        timeout-minutes: 20
        run: |
          for i in {1..3}; do
            ssh -o StrictHostKeyChecking=no user1@${{ steps.set_env.outputs.SERVER_IP }} "
              sudo docker pull ${{ secrets.DOCKER_USERNAME }}/frontend-tu:${{ steps.set_env.outputs.ENV }}
            " && break || sleep 30
          done

      - name: Получение образа Nginx (с повтором)
        timeout-minutes: 15
        run: |
          for i in {1..3}; do
            ssh -o StrictHostKeyChecking=no user1@${{ steps.set_env.outputs.SERVER_IP }} "
              sudo docker pull ${{ secrets.DOCKER_USERNAME }}/nginx-tu:latest
            " && break || sleep 30
          done

      - name: Развертывание контейнеров
        timeout-minutes: 10
        run: |
          ssh -o StrictHostKeyChecking=no user1@${{ steps.set_env.outputs.SERVER_IP }} "
            cd TU-SQL-${{ steps.set_env.outputs.ENV }} || exit 1
            sudo docker-compose -f docker-compose.${{ steps.set_env.outputs.ENV }}.yml down -v
            sudo docker-compose -f docker-compose.${{ steps.set_env.outputs.ENV }}.yml up -d
            sudo docker ps
          "

      - name: Проверка развертывания
        run: |
          ssh -o StrictHostKeyChecking=no user1@${{ steps.set_env.outputs.SERVER_IP }} "\
            sudo docker ps --format 'table {{.ID}}\t{{.
